class Solution
{
    public:
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
     static bool cmp(pair<int, int>a, pair<int, int> b){
        return a.second < b.second;
    }
    int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
        vector<pair<int,int>>meetings;
        for(int i=0;i<n;i++)
        meetings.push_back({start[i],end[i]});
        sort(meetings.begin(),meetings.end(),cmp);
        int limit=meetings[0].second;
        int ans=1;
        int i=1;
        while(i<n){
            if(limit<meetings[i].first){
                limit=meetings[i].second;
                ans++;
            }
            i++;
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int start[n], end[n];
        for (int i = 0; i < n; i++) cin >> start[i];

        for (int i = 0; i < n; i++) cin >> end[i];

        Solution ob;
        int ans = ob.maxMeetings(start, end, n);
        cout << ans << endl;
    }
    return 0;
}
// } Driver Code Ends
